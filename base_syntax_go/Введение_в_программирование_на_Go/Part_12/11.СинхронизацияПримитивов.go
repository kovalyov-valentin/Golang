// В Го кроме горутин и каналов предоставлены более традиционные способы работать с процедурами в отдельных потоках - в пакетах sync , sync/atomic.

// МЬЮТЕКСЫ

// Мютекс (или взаимная блокировка) единовременно блокирует часть кода в одном потоке, а также используется для защиты общих ресурсов из не-атомарных операций.
// Вот пример использования мьютекса:

package main

import (
	"fmt"
	"sync"
	"time"
)
func main() {
	m := new(sync.Mutex)

	for i := 0; i < 10; i++ {
		go func(i int) {
			m.Lock()
			fmt.Println(i, "start")
			time.Sleep(time.Second)
			fmt.Println(i, "end")
			m.Unlock()
		}(i)
	}
	var input string
	fmt.Scanln(&input)
}

// Когда мьютекс (m) заблокирован из одного процесса, любые попытки повторно блокировать его из других процессов приведут к блокировке самих процессов до тех пор, пока мьютекс не будет разблокирован.
// Следует проявлять большую осторожность при использовании мьютексов или примитивов синхронизации из пакета sync/atomic. 

// Традиционное многопоточное программирование является достаточно сложным: сделать ошибку просто, а обнаружить ее трудно, поскольку она может зависеть от специфичных и редких обстоятельств. 
// Одна из сильных сторон Го в том, что он предоставляет намного более простой и безопасный способ распараллеливания задач, чем потоки и блокировки.