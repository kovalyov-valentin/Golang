// Обработка ошибок
// Данная программа не только обрабатывает сообщения об ошибках, генерируемые стандартными Go-функциями, но и создает собственное сообщение об ошибке.
// Данная утилита пытается улучшить функциональность программы cla.go, теперь мы добавим проверку того, соответствуют ли ее аргументы командной строки формату с плавающей точкой.
package main 

import (
	"errors"
	"fmt"
	"os"
	"strconv"
)
func main() {
	if len(os.Args) == 1 {
		fmt.Println("Please give one or more floats.")
		os.Exit(1)
	}

	arguments := os.Args 
	var err error = errors.New("An error") // Здесь создается новая переменная типа error с именем err, чтобы инициализировать ее собственным значением.
	k := 1
	var n float64


	// Самая сложная часть программы:
	for err != nil {
		if k >= len(arguments) { // Если первый аргумент не является корректным числом с плавающей, нужно проверить следующий аргумент и продолжать проверку до тех пор, пока невстретится аргумент команднйо строки подходящего формата.
			fmt.Println("None of arguments is a float!") // Если ни один из аргументов командной строки не соответсвует формату числа с плавающей точкой, программа прекращает работу и выводит на экран сообщение об ошибке
			return
		}
		n, err = strconv.ParseFloat(arguments[k], 64) // Вся проверка выполняется путем исследования значения типа error, которое возвращается функцией strconv.ParseFloat()
		k++
	}
	min, max := n, n // Весь код (от for) предназначен лишь для точной инициализации переменных min и max



	// здесь мы просто обрабатываем все аргументы командной строки правилнього формата, чтобы найти среди них минимальное и максимальное значение с плавающей точкой
	for i := 2; i < len(arguments); i++ {
		n, err := strconv.ParseFloat(arguments[i], 64)
		if err == nil {
			if n < min {
				min = n
			}
			if n > max {
				max = n
			}
		}
	}
	fmt.Println("Min:", min)
	fmt.Println("Max:", max)
}
// Как можно увидеть на примере этого кода, большая его часть посвящена обработке ошибок, а не выполнению того, для чего программа предназначена.
// К сожалению это относится к большинству программ не только Go, но и других ЯП.
