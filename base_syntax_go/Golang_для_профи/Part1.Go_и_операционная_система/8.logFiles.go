// Пример Go-программы, которая записывает информацию в журнальные файлы
// Рассмотрим использование пакетов log и log/syslog для записи в файлы системного журнала на примере Go-кода
package main 

import (
	"fmt"
	"log" // Позволяет отправлять журнальные сообщения в системную службу журналирования
	"log/syslog" // syslog позволяет определить уровень журналирования и средство журналирования
	"os"
	"path/filepath"
)
func main() {
	programName := filepath.Base(os.Args[0])
	sysLog, err := syslog.New(syslog.LOG_INFO|syslog.LOG_LOCAL7, programName) /* Первым параметром функции syslog.New() является приоритет, который представляет собой соединение средства журналирования и уровня журналирования.
	В результате этот код устанавливает такой режим журналирования по умолчанию: средство журналирования local7 и уровень журналирования info.
	Второй параметр функции syslog.New() - это имя процесса, который будет отображаться в журналах в качестве отправителя сообщения.
	Рекомендуется использовать настоящее имя исполняемого файла, чтобы впоследствии можно было легко найти нужную информацию в файлах журналов.*/

	if err != nil { // В это части кода проверяется переменная типа error, которая возвращается функцией syslog.New()
		log.Fatal(err)
	} else {
		log.SetOutput(sysLog) // Если значение переменной типа error равно nil, то можно вызвать функцию log.SetOutput(), которая задает приемник вывода для записи в журнал по умолчанию, в данном случае это ранее созданный регистратор журнала (syslog) 
	}
	log.Println("LOG_INFO + LOG_LOCAL7: Logging in Go!") // Функция log.Println() отправляет инфу на сервер журнала.

	sysLog, err = syslog.New(syslog.LOG_MAIL, "Some program!")
	if err != nil {
		log.Fatal(err)
	} else {
		log.SetOutput(sysLog)
	}
	log.Println("LOG_MAIL: Logging in Go!")
	fmt.Println("Will you see this?")
}

// Следует запомнить: если сервер журналирования на UNIX-машине не настроен на перехват всех средств журналирования, то некоторые из отправляемых на него записей журнала могут быть удалены без каких-либо предупреждений.
