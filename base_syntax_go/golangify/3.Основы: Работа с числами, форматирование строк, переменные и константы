МАТЕМАТИЧЕСКИЕ ВЫЧИСЛЕНИЯ В ГО

В Го есть те же арифметические операторы, что и в других популярных языках программирования:
1. + (сложение)
2. - (вычитание)
3. * (умножение)
4. / (деление)
5. % (нахождение модуля)
    Оператор модуля (%) нужен для получения остатка от деления двух чисел.
    Пример, 42 % 10 = 2

(Для примера вычисления того насколько моложе и легче станет человек на Марсе, представлена программа в файле 3.go (1))

Представленный код начинается с комментария //.
Комментарии предназначены только для разработчика.
Они никак не влияют на ход программы.

В коде функция Print вызывается несколько раз для отображения предложения в одной строке.

Также можно передать список аргументов, разделенных запятыми.
Аргументом Println может быть текст, число или математическое выражение:
ПРИМЕР В ФАЙЛЕ 3.go (2)



ФОРМАТИРОВАННЫЙ ВЫВОД GOLANG - PRINT, PRINTLN, PRINTF

Кроме функций Print и Println, есть еще функция Printf, которая дает еще больше контроля над выводом.
Используя Printf, можно вставлять значение в любой части текста:
ПРИМЕР В ФАЙЛЕ 3.go (3)

В отличие от Print и Println, первым аргументом Printf всегда является текст.
После текста следует специальный символ %v, что является заменой значения (сокращенно value), рассчитанного во втором аргументе.
    Помимо %v в Го используются и друие специальные символы.

Функция Println автоматически перемещает текст на следующую строку, в то время как Printf и Print этого не делают.
При желании что-то переместить на новую строку в тексте нужно добавить \n.

Если уточняется несколько специальных символов, функция Printf подставит значения в следующем порядке:
ПРИМЕР В ФАЙЛЕ 3.go (4)

В дополнении подставным значениям в предложении Printf позволяет выравнивать текст.
Уточнить ширину можно специальном символе.
К примеру, %4v добавит отступ размером в символа.
Положительные числа добавляют отступы слева, а отрицательные справа:
ПРИМЕР В ФАЙЛЕ 3.go (5)



КОНСТАНТЫ И ПЕРЕМЕННЫЕ В GO 

Вычисления в предыдущей программе осуществлены над числовыми литералами.
И не совсем ясно, что означают числа, к примеру 0.3783.
Константы и переменные могут помочь в этом, предоставив говорящие за себя названия.

В следующей программе представлено два новых ключевых слова const и var, что нужны для объявления констант и переменных:
ЗАДАЧА О ПОЛЕТЕ НА МАРС В ФАЙЛЕ 3.go (6)

Первое вычисление программы основывается на том, что Марс и Земля находятся рядом.
Объявляется переменная distance, которой присваивается значение в 56 000 000 км.
Затем переменной distance присваивается новое значение в 401 000 000 км, что является расстоянием между планетами в тот момент, когда они находятся впротивоположных концах солнечной орбиты.
    Константу lightSpeed изменить нельзя.
    При попытке присвоить ей новое значение компилятор выдаст ошибку.

Переменные должны быть объявлены перед их использованием.
Го выведет ошибку при попытке присвоить значение переменно, которая не была объявлена через var.
Пример, speed = 16.
Это ограничение помогает избежать ошибок случайного присваивания значений не етм переменным.
В таком случае сразу можно заметить опечатки, вроде distence вместо distance.

ВОПРОСЫ ДЛЯ ПРОВЕРКИ В ФАЙЛЕ 3.go (7)



ОБЯВЛЕНИЕ НЕСКОЛЬКИХ ПЕРЕМЕННЫХ СРАЗУ 

Объявление переменной или константы в Го осуществляется следующим образом:
var distance = 56000000
var speed = 100800

Переменные или константы также можно объявить группой:
var (
    distance = 56000000
    speed = 100800
)

Объявление нескольких переменных в одну строку:
var distance, speed = 56000000, 100800

Перед объявлением нескольких переменных как группы или в одну строку, надо посмотреть, связаны ли рассматриваемые переменные.

ВОПРОС ДЛЯ ПРОВЕРКИ В ФАЙЛЕ 3.go (8)



ОПЕРАТОРЫ ИНКРЕМЕНТА И ПРИСВАИВАНИЯ ГО

Есть несколько коротких способов присваивания с другими операциями.
Последние две строки следующего кода равнозначны:
var weight = 149.0
weight = weight * 0.3783
weight *= 0.3783

У оператора инкремента, или увеличения на один, есть сокращенный вариант записи, как показано в следующем коде:
var age = 41
age = age + 1
age += 1
age++

Уменьшить значение можно через count--
Или через сокращенные варианты других операторов вроде price /= 2 таким же образом.
    Но Го не поддерживает префикс инкремента ++count, как это делают C и Java

ВОПРОС ДЛЯ ПРОВЕРКИ В ФАЙЛЕ 3.go (9)



ГЕНЕРАЦИЯ СЛУЧАЙНОГО ЧИСЛА В ГО 

Для генерации псевдослучайного числа в Го используется пакет rand.
Числа называются псевдослучайными, т.к. они более-менее случайные, но не совсем.

Следующая программа (ФАЙЛ 3.go (10)) отображает числа в диапазоне 1-10.
При передаче 10 к Intn возвращается число в промежутке 0-9, куда добавляет 1 и результат присваивается к num.
Переменная num не может быть константой Го, так как это результат вызова функции.
    ЗАМЕТКА: При рассмотрении промежутка 1-10 обязательно нужно добавить единицу.
    В противном случае будет получено число в диапазоне 0-9.
    Это типичный пример ошибки неучтенной единицы

Путем импорта пакета rand является math/rand. 
У функции Intn есть префикс rand (название пакета), хотя путь испорта длиннее.

ВОПРОС ДЛЯ ПРОВЕРКИ В ФАЙЛЕ 3.go (11)



ЗАКЛЮЧЕНИЕ

1. Функции Print, Println и Printf выводят на экран текст и числа 
2. С помощью Printf и специального сокращения %v значения можно вставить в любое место отображаемого текста
3. Константа объявляется через ключевое слово const, ее изменить нельзя
4. Переменная объявляется через ключевое слово var, ей можно присовить новое значение во время работы программы.
5. Пути импорта math/rand отсылаются к пакету rand 
6. Функция Intn из пакета rand генерирует псевдослучайные числа
7. В уроке были разобраны 5 из 25 ключевых слов Go: 
    1. package
    2. import
    3. func
    4. const
    5. var

ПРОВЕРОЧНОЕ ЗАДАНИЕ В ФАЙЛЕ 3.go (12)

