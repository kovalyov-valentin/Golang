По ходу выполнения программы многие переменные немного используются на протяжении довольно короткого времени, после чего сбрасываются.
Это обусловлено правилами видимости языка.

Область видимости переменных помогает сфокусироваться на уместных для рассматриваемой функции или участка кода переменных без необходимости заботиться об оставшейся части.



ОБЛАСТЬ ВИДИМОСТИ ПЕРЕМЕННЫХ В GOLANG

Когда переменная объявляется, она попадает в область видимости.
Проще говоря, переменная становится видимой.
Если переменная находится в области видимости, тогда программа всегда может получить к ней доступ.
Однако, как только переменная покидает область видимости, при попытке получить в ней доступ выйдет ошибка.

Преимущество области видимсоти в том, что мы можем повторно использовать одно и то же название для разных переменных.

В Го область видимости начинается и заканчивается фигурными скобками.
В следующей программе (ФАЙЛ 6.GO (1)) функция main начинает область вдимости, а вместе с циклом for стартует вложенная область.

В вышеизложенной программе мы видим, что переменная count объявляется внутри области видимости функции, она видима до конца функции main, в то время как переменная num объявляется внутри области видимости цикла for.
По завершении цикоа переменная num выходит из области видимости.

При попытке получить доступ к переменной num после цикла, компилятор Го выведет ошибку.
Однако получить л=доступ к переменной count по завершении цикла for все еще можно, ведь ее объявили за пределами цикла, хотя особой причины для этого не было.
Для заключения переменной count в области видимости цикла понадобится использовать другой способ объявления переменных в Го.

ВОПРОСЫ ДЛЯ ПРОВЕРКИ (ФАЙЛ 6.GO (2,3))



КРАТКОЕ ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ В GO 

Краткое объявление переменной осуществляется через альтернативный синтаксис для ключевого слова var.
Следующие две строки эквивалентны: 
var count = 10
count := 10 

Может показаться, что разница мизерна, но разница в три символа делает сокращенный вариант намного популярнее.
Кроме того, краткое объявление может использоваться в некоторых местах, где недопустимо var.

В следующей программе (ФАЙЛ 6.GO (4)) показан пример цикла for, что совмещает инициализацию, условие и последующий оператор, что уменьшает значение count.
При использовании данной формы цикла for очень важен порядок:
    Иницализация
    Условие 
    Операция

Не используя краткое объявление, переменную count нужно было бы объявить за пределами цикла, следовательно, переменная в таком случае после завершения цикла остается в области видимости.

В следующей программе (ФАЙЛ 6.GO (5)) при задействовании краткого объявления, переменная count объявляется и инициализируется как часть цикла for, по завершении цикла выходит из области видимости.
Если бы к переменной count доступ был получен за пределами цикла, тогда компилятор Го выдал бы ошибку. 

Краткое объявление дает возможножность объявить новую переменную в операторе if.
В следующем коде (ФАЙЛ 6.GO (6)) переменная num может использоваться в любом ответвлении оператора if.

Краткое объявление может использоваться с оператором switch, как показано в следующей программе (ФАЙЛ 6.GO (7))

ВОПРОС ДЛЯ ПРОВЕРКИ (ФАЙЛ 6.GO (8))



ЛОКАЛЬНАЯ И ГЛОБАЛЬНАЯ ОБЛАСТЬ ВИДИМОСТИ 

Следующий код (ФАЙЛ 6.GO (9)) генерирует и отображает случайную дату.
К примеру дату вылета на Марс.
В нем также представлено несколько областе видимости и показано почему важно задуматься об области во время объявления переменной. 

Переменная era объявляется за пределами функции main области видимости пакета.
Если бы в пакете main использовалось несколько функций, тогда переменная era была бы видна для них всех.
    ЗАМЕТКА. Краткое объявление переменных недоступно для переменных, объявленных в области видимости пакета, поэтому переменную era нельзя объявить через era := "AD" в ее текущей позиции.

Переменная year видна только внутри функции main.
Другие функции видят era, но не year. 
Область видимости функции уже, чем область видимости пакета.
Она начинается с ключевого слова func и заканчивается закрывающей скобкой.

Переменная month доступна внутри оператора switch, но как только оператор switch заканчивается, month выводится из области видимости.
Область видимсоит начинается с ключевого слова switch и заканчивается закрывающей скобкой switch.

У каждого case есть собственная область видимости и три независимые переменные day.
Как только каждый случай заканчивается, объявленная внутри case переменная day выходит за пределы области видимости.
Это единственная ситуация, когда для обозначения области видимости не используются скобки.

Код примера далек до идеала. 
Узкая область видимости переменных month и day приводит к дубликату кода (Println, Println, Println).
Когда код дублируется, кто-то может пересмотреть код в одной области, но не в другой (при решении не выводить era, но забыв изменить один case).
Иногда дублированный код имеет смысл, однако чаще всего он рассматривается как код с запашком и указывается на возможные проблемы в программе.

Для удаления дубликатов и упрощения кода переменные нужно было объявлять в более широкой области видимости функции, делая их доступными после оператора switch для дальнейшей работы. 

Это значит время рефакторинга!
Рефакторинг предполагает под собой модификацию кода без изменения его поведения.
Следующая программа (ФАЙЛ 6.GO (10)) по-прежнему выводит случайную дату.

Хотя узкая область видимости зачастую сокращает ментальную работу, код выше демонстрирует, что слишком сильное ограничение переменных может привести к менее читабульному коду.
Стоит это учитывать и делать рефакторинг до тех пор, пока код не станет максимально простым.

ВОПРОС ДЛЯ ПРОВЕРКИ:
    Как можно распознать слишком узкую область видимости переменных?
        ОТВЕТ: Код дублируется из-за места объявления переменных.



ЗАКЛЮЧЕНИЕ 

- Открывающая фигурная скобка вводит новую область видисоти, что оканчивается закрывающей скобкой.
- Ключевые слова case и default также вводят новую область видимости, хотя фигурные скобки здесь уже не используются.
- Место объявления переменной определяется тем, в какой она области видимости.
- Переменные, объявленные на той же строке, что и ключевые слова for, if, switch находятся в области видимости до окончания данного оператора.
- Иногда широкая область видимости лучше, а иногда узкая, все зависит от ситуации.

ЗАДАНИЕ ДЛЯ ИТОГОВОЙ ПРОВЕРКИ (ФАЙЛ 6.GO (11))